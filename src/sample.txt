
1 a=8
2 b=8*(a-6)
3 c=b+6
4 ls(a, 2)
5 xor(b-a+1,17)
6 y=2*b-c
7 xor(rs(y, 2), not(c))


; ModuleID = 'advcalc2ir'
declare i32 @printf(i8*, ...)

@print.str = constant [4 x i8] c"%d\0A\00"

define i32 @main() {
  %1 = alloca i32
  %a = alloca i32
  %b = alloca i32
  %c = alloca i32
  %y = alloca i32
  store i32 0, i32* %1
  store i32 8, i32* %a
  %2 = load i32, i32* %a
  %3 = sub i32 %2, 6
  %4 = mul i32 8, %3
  store i32 %4, i32* %b
  %5 = load i32, i32* %b
  %6 = add i32 %5, 6
  store i32 %6, i32* %c
  %7 = load i32, i32* %a
  %8 = shl i32 %7, 2
  call i32 (i8*, ...) @printf(i8* getelementptr ([4 x i8], [4 x i8]* @print.str, i32 0, i32 0), i32 %8 )
  %10 = load i32, i32* %b
  %11 = load i32, i32* %a
  %12 = sub i32 %10, %11
  %13 = add i32 %12, 1
  %14 = xor i32 %13, 17
  call i32 (i8*, ...) @printf(i8* getelementptr ([4 x i8], [4 x i8]* @print.str, i32 0, i32 0), i32 %14)
  %16 = load i32, i32* %b
  %17 = mul i32 %16, 2
  %18 = load i32, i32* %c
  %19 = sub i32 %17, %18
  store i32 %19, i32* %y
  %20 = load i32, i32* %y
  %21 = ashr i32 %20, 2
  %22 = load i32, i32* %c
  %23 = xor i32 %22, -1
  %24 = xor i32 %21, %23
  call i32 (i8*, ...) @printf(i8* getelementptr ([4 x i8], [4 x i8]* @print.str, i32 0, i32 0), i32 %24)
  ret i32 0
}
